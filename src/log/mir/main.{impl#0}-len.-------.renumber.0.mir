// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:145:1: 423:2>::len` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:145:1: 423:2>::len(_1: &'_#5r BoolArr32) -> usize {
    debug self => _1;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:159:16: 159:21
    let mut _0: usize;                   // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:159:26: 159:31
    let mut _2: &'_#6r std::vec::Vec<bool>; // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:160:9: 160:15

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:160:9: 160:15
        _2 = &'_#4r ((*_1).0: std::vec::Vec<bool>); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:160:9: 160:15
        _0 = std::vec::Vec::<bool>::len(move _2) -> [return: bb1, unwind: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:160:9: 160:21
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:160:16: 160:19
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<bool>) -> usize {std::vec::Vec::<bool>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:160:20: 160:21
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:161:6: 161:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:159:5: 161:6
    }
}
