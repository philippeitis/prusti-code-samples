// MIR for `prusti_post_item_flip_bits_90a3f3d6c7264949a8d71f472467366c::{closure#0}::{closure#2}` 0 renumber

fn prusti_post_item_flip_bits_90a3f3d6c7264949a8d71f472467366c::{closure#0}::{closure#2}(_1: &'_#11r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:79]) -> bool {
    debug result => (*((*_1).0: &'_#15r u32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:131:1: 139:2
    debug i => (*((*_1).1: &'_#16r u32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:127:13: 127:14
    debug a => (*((*_1).2: &'_#17r u32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:131:14: 131:15
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:79
    let mut _2: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:53
    let mut _3: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:43: 128:49
    let mut _4: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:51: 128:52
    let mut _5: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:57: 128:79
    let mut _6: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:69: 128:70
    let mut _7: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:72: 128:78
    let mut _8: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:77: 128:78
    let mut _9: (u32, bool);             // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:72: 128:78

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:53
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:43: 128:49
        _3 = (*((*_1).0: &'_#7r u32));   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:43: 128:49
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:51: 128:52
        _4 = (*((*_1).1: &'_#8r u32));   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:51: 128:52
        _2 = look_up_bit(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:53
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:42
                                         // + literal: Const { ty: fn(u32, u32) -> u8 {look_up_bit}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:52: 128:53
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:52: 128:53
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:57: 128:79
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:69: 128:70
        _6 = (*((*_1).2: &'_#9r u32));   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:69: 128:70
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:72: 128:78
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:77: 128:78
        _8 = (*((*_1).1: &'_#10r u32));  // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:77: 128:78
        _9 = CheckedSub(const 32_u32, _8); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:72: 128:78
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_u32, move _8) -> [success: bb2, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:72: 128:78
    }

    bb2: {
        _7 = move (_9.0: u32);           // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:72: 128:78
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:77: 128:78
        _5 = look_up_bit(move _6, move _7) -> [return: bb3, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:57: 128:79
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:57: 128:68
                                         // + literal: Const { ty: fn(u32, u32) -> u8 {look_up_bit}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:78: 128:79
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:78: 128:79
        _0 = Eq(move _2, move _5);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:79
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:78: 128:79
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:78: 128:79
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:79: 128:79
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:128:31: 128:79
    }
}
