// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:8:1: 130:2>::prusti_post_item_pop_f55b411b7afc4c98a1a7afd00c926fda::{closure#0}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:8:1: 130:2>::prusti_post_item_pop_f55b411b7afc4c98a1a7afd00c926fda::{closure#0}(_1: &'_#14r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 79:7]) -> bool {
    debug result => (*((*_1).0: &'_#20r u8)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:80:5: 89:6
    debug self => (*((*_1).1: &'_#21r &'_#22r mut PrustiVec)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:86:12: 86:21
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 79:7
    let mut _2: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 76:21
    let mut _3: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:25: 79:7
    let mut _4: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:29: 79:6
    let _5: usize;                       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:13: 77:14
    let mut _6: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:27
    let mut _7: &'_#18r PrustiVec;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:21
    let mut _8: (usize, bool);           // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:31
    let mut _9: &'_#19r PrustiVec;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:9: 78:13
    let mut _10: usize;                  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:21: 78:22
    scope 1 {
        debug l => _5;                   // in scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:13: 77:14
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 76:21
        _2 = (*((*_1).0: &'_#7r u8));    // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 76:21
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:25: 79:7
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:29: 79:6
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:13: 77:14
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:27
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:21
        _7 = &'_#8r (*(*((*_1).1: &'_#9r &'_#10r mut PrustiVec))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:21
        _6 = PrustiVec::len(move _7) -> [return: bb1, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:27
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:22: 77:25
                                         // + literal: Const { ty: for<'r> fn(&'r PrustiVec) -> usize {PrustiVec::len}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:26: 77:27
        _8 = CheckedSub(_6, const 1_usize); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:31
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_usize) -> [success: bb2, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:31
    }

    bb2: {
        _5 = move (_8.0: usize);         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:17: 77:31
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:30: 77:31
        FakeRead(ForLet, _5);            // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:77:13: 77:14
        StorageLive(_9);                 // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:9: 78:13
        _9 = &'_#11r (*(*((*_1).1: &'_#12r &'_#13r mut PrustiVec))); // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:9: 78:13
        StorageLive(_10);                // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:21: 78:22
        _10 = _5;                        // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:21: 78:22
        _4 = PrustiVec::lookup(move _9, move _10) -> [return: bb3, unwind: bb5]; // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:9: 78:23
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:14: 78:20
                                         // + literal: Const { ty: for<'r> fn(&'r PrustiVec, usize) -> u8 {PrustiVec::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_10);                // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:22: 78:23
        StorageDead(_9);                 // scope 1 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:78:22: 78:23
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:79:5: 79:6
        _3 = prusti_contracts::old::<u8>(move _4) -> [return: bb4, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:25: 79:7
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:25: 76:28
                                         // + literal: Const { ty: fn(u8) -> u8 {prusti_contracts::old::<u8>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:79:6: 79:7
        _0 = Eq(move _2, move _3);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 79:7
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:79:6: 79:7
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:79:6: 79:7
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:79:7: 79:7
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main_copy.rs:76:15: 79:7
    }
}
