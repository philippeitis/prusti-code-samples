// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:145:1: 423:2>::lookup` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:145:1: 423:2>::lookup(_1: &'_#5r BoolArr32, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:168:19: 168:24
    debug index => _2;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:168:26: 168:31
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:168:43: 168:47
    let mut _3: &'_#6r bool;             // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:22
    let mut _4: &'_#7r std::vec::Vec<bool>; // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:15
    let mut _5: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:16: 169:21

    bb0: {
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:22
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:15
        _4 = &'_#4r ((*_1).0: std::vec::Vec<bool>); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:15
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:16: 169:21
        _5 = _2;                         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:16: 169:21
        _3 = <std::vec::Vec<bool> as std::ops::Index<usize>>::index(move _4, move _5) -> [return: bb1, unwind: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:22
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:22
                                         // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<bool>, usize) -> &'r <std::vec::Vec<bool> as std::ops::Index<usize>>::Output {<std::vec::Vec<bool> as std::ops::Index<usize>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = (*_3);                      // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:9: 169:22
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:21: 169:22
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:169:21: 169:22
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:170:5: 170:6
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:170:6: 170:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:168:5: 170:6
    }
}
