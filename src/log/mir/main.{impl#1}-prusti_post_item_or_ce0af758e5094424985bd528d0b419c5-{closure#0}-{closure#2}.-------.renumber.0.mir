// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 767:2>::prusti_post_item_or_ce0af758e5094424985bd528d0b419c5::{closure#0}::{closure#2}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 767:2>::prusti_post_item_or_ce0af758e5094424985bd528d0b419c5::{closure#0}::{closure#2}(_1: &'_#21r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:88]) -> bool {
    debug result => (*((*_1).0: &'_#31r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:683:5: 685:6
    debug i => (*((*_1).1: &'_#32r usize)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:679:17: 679:18
    debug self => (*((*_1).2: &'_#33r &'_#34r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:683:11: 683:16
    debug other => (*((*_1).3: &'_#35r &'_#36r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:683:18: 683:23
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:88
    let mut _2: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:50
    let mut _3: &'_#28r BitVec32;        // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:40
    let mut _4: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:48: 680:49
    let mut _5: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:54: 680:88
    let mut _6: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:55: 680:69
    let mut _7: &'_#29r BitVec32;        // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:55: 680:59
    let mut _8: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:67: 680:68
    let mut _9: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:72: 680:87
    let mut _10: &'_#30r BitVec32;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:72: 680:77
    let mut _11: usize;                  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:85: 680:86

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:50
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:40
        _3 = &'_#10r (*((*_1).0: &'_#11r BitVec32)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:40
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:48: 680:49
        _4 = (*((*_1).1: &'_#12r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:48: 680:49
        _2 = BitVec32::lookup(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:50
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:41: 680:47
                                         // + literal: Const { ty: for<'r> fn(&'r BitVec32, usize) -> bool {BitVec32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:49: 680:50
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:49: 680:50
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:54: 680:88
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:55: 680:69
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:55: 680:59
        _7 = &'_#13r (*(*((*_1).2: &'_#14r &'_#15r BitVec32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:55: 680:59
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:67: 680:68
        _8 = (*((*_1).1: &'_#16r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:67: 680:68
        _6 = BitVec32::lookup(move _7, move _8) -> [return: bb2, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:55: 680:69
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:60: 680:66
                                         // + literal: Const { ty: for<'r> fn(&'r BitVec32, usize) -> bool {BitVec32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:68: 680:69
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:68: 680:69
        StorageLive(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:72: 680:87
        StorageLive(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:72: 680:77
        _10 = &'_#17r (*(*((*_1).3: &'_#18r &'_#19r BitVec32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:72: 680:77
        StorageLive(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:85: 680:86
        _11 = (*((*_1).1: &'_#20r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:85: 680:86
        _9 = BitVec32::lookup(move _10, move _11) -> [return: bb3, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:72: 680:87
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:78: 680:84
                                         // + literal: Const { ty: for<'r> fn(&'r BitVec32, usize) -> bool {BitVec32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:86: 680:87
        StorageDead(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:86: 680:87
        _5 = BitOr(move _6, move _9);    // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:54: 680:88
        StorageDead(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:87: 680:88
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:87: 680:88
        _0 = Eq(move _2, move _5);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:88
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:87: 680:88
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:87: 680:88
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:88: 680:88
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:680:34: 680:88
    }
}
