// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 784:2>::prusti_post_item_mul_d4e8f4207da04a658182e425ad9be42e::{closure#0}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 784:2>::prusti_post_item_mul_d4e8f4207da04a658182e425ad9be42e::{closure#0}(_1: &'_#14r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:43]) -> bool {
    debug result => (*((*_1).0: &'_#20r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:764:5: 768:6
    debug self => (*((*_1).1: &'_#21r &'_#22r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:766:12: 766:17
    debug other => (*((*_1).2: &'_#23r &'_#24r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:766:19: 766:24
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:43
    let mut _2: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:23
    let mut _3: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:43
    let mut _4: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:33
    let mut _5: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:36: 765:43
    let mut _6: (u32, bool);             // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:43

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:23
        _2 = ((*((*_1).0: &'_#9r BitVec32)).0: u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:23
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:43
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:33
        _4 = ((*(*((*_1).1: &'_#10r &'_#11r BitVec32))).0: u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:33
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:36: 765:43
        _5 = ((*(*((*_1).2: &'_#12r &'_#13r BitVec32))).0: u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:36: 765:43
        _6 = CheckedMul(_4, _5);         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:43
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:43
    }

    bb1: {
        _3 = move (_6.0: u32);           // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:27: 765:43
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:42: 765:43
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:42: 765:43
        _0 = Eq(move _2, move _3);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:43
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:42: 765:43
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:42: 765:43
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:43: 765:43
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:765:15: 765:43
    }
}
