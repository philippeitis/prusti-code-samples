// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 767:2>::prusti_post_item_mul_a4c1c0d546664b369e05fd08837898cc::{closure#0}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 767:2>::prusti_post_item_mul_a4c1c0d546664b369e05fd08837898cc::{closure#0}(_1: &'_#14r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:43]) -> bool {
    debug result => (*((*_1).0: &'_#20r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:751:5: 753:6
    debug self => (*((*_1).1: &'_#21r &'_#22r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:751:12: 751:17
    debug other => (*((*_1).2: &'_#23r &'_#24r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:751:19: 751:24
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:43
    let mut _2: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:23
    let mut _3: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:43
    let mut _4: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:33
    let mut _5: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:36: 750:43
    let mut _6: (u32, bool);             // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:43

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:23
        _2 = ((*((*_1).0: &'_#9r BitVec32)).0: u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:23
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:43
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:33
        _4 = ((*(*((*_1).1: &'_#10r &'_#11r BitVec32))).0: u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:33
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:36: 750:43
        _5 = ((*(*((*_1).2: &'_#12r &'_#13r BitVec32))).0: u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:36: 750:43
        _6 = CheckedMul(_4, _5);         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:43
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:43
    }

    bb1: {
        _3 = move (_6.0: u32);           // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:27: 750:43
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:42: 750:43
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:42: 750:43
        _0 = Eq(move _2, move _3);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:43
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:42: 750:43
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:42: 750:43
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:43: 750:43
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:750:15: 750:43
    }
}
