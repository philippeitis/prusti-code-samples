// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:145:1: 423:2>::and::{closure#1}::{closure#0}::{closure#2}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:145:1: 423:2>::and::{closure#1}::{closure#0}::{closure#2}(_1: &'_#21r [closure@/home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:72]) -> bool {
    debug out => (*((*_1).0: &'_#31r BoolArr32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:346:13: 346:20
    debug j => (*((*_1).1: &'_#32r usize)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:350:37: 350:38
    debug self => (*((*_1).2: &'_#33r &'_#34r BoolArr32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:345:12: 345:17
    debug other => (*((*_1).3: &'_#35r &'_#36r BoolArr32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:345:19: 345:24
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:72
    let mut _2: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:34
    let mut _3: &'_#28r BoolArr32;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:24
    let mut _4: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:32: 352:33
    let mut _5: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:38: 352:72
    let mut _6: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:39: 352:53
    let mut _7: &'_#29r BoolArr32;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:39: 352:43
    let mut _8: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:51: 352:52
    let mut _9: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:56: 352:71
    let mut _10: &'_#30r BoolArr32;      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:56: 352:61
    let mut _11: usize;                  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:69: 352:70

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:34
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:24
        _3 = &'_#10r (*((*_1).0: &'_#11r BoolArr32)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:24
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:32: 352:33
        _4 = (*((*_1).1: &'_#12r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:32: 352:33
        _2 = BoolArr32::lookup(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:34
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:25: 352:31
                                         // + literal: Const { ty: for<'r> fn(&'r BoolArr32, usize) -> bool {BoolArr32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:33: 352:34
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:33: 352:34
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:38: 352:72
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:39: 352:53
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:39: 352:43
        _7 = &'_#13r (*(*((*_1).2: &'_#14r &'_#15r BoolArr32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:39: 352:43
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:51: 352:52
        _8 = (*((*_1).1: &'_#16r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:51: 352:52
        _6 = BoolArr32::lookup(move _7, move _8) -> [return: bb2, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:39: 352:53
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:44: 352:50
                                         // + literal: Const { ty: for<'r> fn(&'r BoolArr32, usize) -> bool {BoolArr32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:52: 352:53
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:52: 352:53
        StorageLive(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:56: 352:71
        StorageLive(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:56: 352:61
        _10 = &'_#17r (*(*((*_1).3: &'_#18r &'_#19r BoolArr32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:56: 352:61
        StorageLive(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:69: 352:70
        _11 = (*((*_1).1: &'_#20r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:69: 352:70
        _9 = BoolArr32::lookup(move _10, move _11) -> [return: bb3, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:56: 352:71
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:62: 352:68
                                         // + literal: Const { ty: for<'r> fn(&'r BoolArr32, usize) -> bool {BoolArr32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:70: 352:71
        StorageDead(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:70: 352:71
        _5 = BitAnd(move _6, move _9);   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:38: 352:72
        StorageDead(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:71: 352:72
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:71: 352:72
        _0 = Eq(move _2, move _5);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:72
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:71: 352:72
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:71: 352:72
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:72: 352:72
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:352:21: 352:72
    }
}
