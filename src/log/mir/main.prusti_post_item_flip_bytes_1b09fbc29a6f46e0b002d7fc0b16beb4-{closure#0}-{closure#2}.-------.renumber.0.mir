// MIR for `prusti_post_item_flip_bytes_1b09fbc29a6f46e0b002d7fc0b16beb4::{closure#0}::{closure#2}` 0 renumber

fn prusti_post_item_flip_bytes_1b09fbc29a6f46e0b002d7fc0b16beb4::{closure#0}::{closure#2}(_1: &'_#11r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:81]) -> bool {
    debug result => (*((*_1).0: &'_#15r [u8; 32])); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:153:1: 161:2
    debug i => (*((*_1).1: &'_#16r usize)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:149:13: 149:14
    debug a => (*((*_1).2: &'_#17r [u8; 32])); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:153:15: 153:16
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:81
    let mut _2: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:54
    let mut _3: [u8; 32];                // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:44: 150:50
    let mut _4: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:52: 150:53
    let mut _5: u8;                      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:58: 150:81
    let mut _6: [u8; 32];                // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:71: 150:72
    let mut _7: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:74: 150:80
    let mut _8: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:79: 150:80
    let mut _9: (usize, bool);           // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:74: 150:80

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:54
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:44: 150:50
        _3 = (*((*_1).0: &'_#7r [u8; 32])); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:44: 150:50
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:52: 150:53
        _4 = (*((*_1).1: &'_#8r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:52: 150:53
        _2 = look_up_byte(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:54
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:43
                                         // + literal: Const { ty: fn([u8; 32], usize) -> u8 {look_up_byte}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:53: 150:54
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:53: 150:54
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:58: 150:81
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:71: 150:72
        _6 = (*((*_1).2: &'_#9r [u8; 32])); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:71: 150:72
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:74: 150:80
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:79: 150:80
        _8 = (*((*_1).1: &'_#10r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:79: 150:80
        _9 = CheckedSub(const 32_usize, _8); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:74: 150:80
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_usize, move _8) -> [success: bb2, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:74: 150:80
    }

    bb2: {
        _7 = move (_9.0: usize);         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:74: 150:80
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:79: 150:80
        _5 = look_up_byte(move _6, move _7) -> [return: bb3, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:58: 150:81
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:58: 150:70
                                         // + literal: Const { ty: fn([u8; 32], usize) -> u8 {look_up_byte}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:80: 150:81
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:80: 150:81
        _0 = Eq(move _2, move _5);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:81
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:80: 150:81
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:80: 150:81
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:81: 150:81
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:150:31: 150:81
    }
}
