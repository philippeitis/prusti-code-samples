// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 730:2>::prusti_post_item_reverse_bits_v_0f73499c62a8430c968ac19e98d87f50::{closure#0}::{closure#2}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:442:1: 730:2>::prusti_post_item_reverse_bits_v_0f73499c62a8430c968ac19e98d87f50::{closure#0}::{closure#2}(_1: &'_#15r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:74]) -> bool {
    debug result => (*((*_1).0: &'_#22r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:490:5: 522:6
    debug i => (*((*_1).1: &'_#23r usize)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:498:17: 498:18
    debug self => (*((*_1).2: &'_#24r &'_#25r BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:502:23: 502:28
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:74
    let mut _2: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:51
    let mut _3: &'_#20r BitVec32;        // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:41
    let mut _4: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:49: 499:50
    let mut _5: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:55: 499:74
    let mut _6: &'_#21r BitVec32;        // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:55: 499:59
    let mut _7: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:67: 499:73
    let mut _8: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:72: 499:73
    let mut _9: (usize, bool);           // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:67: 499:73

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:51
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:41
        _3 = &'_#8r (*((*_1).0: &'_#9r BitVec32)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:41
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:49: 499:50
        _4 = (*((*_1).1: &'_#10r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:49: 499:50
        _2 = BitVec32::lookup(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:51
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:42: 499:48
                                         // + literal: Const { ty: for<'r> fn(&'r BitVec32, usize) -> bool {BitVec32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:50: 499:51
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:50: 499:51
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:55: 499:74
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:55: 499:59
        _6 = &'_#11r (*(*((*_1).2: &'_#12r &'_#13r BitVec32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:55: 499:59
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:67: 499:73
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:72: 499:73
        _8 = (*((*_1).1: &'_#14r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:72: 499:73
        _9 = CheckedSub(const 31_usize, _8); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:67: 499:73
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const 31_usize, move _8) -> [success: bb2, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:67: 499:73
    }

    bb2: {
        _7 = move (_9.0: usize);         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:67: 499:73
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:72: 499:73
        _5 = BitVec32::lookup(move _6, move _7) -> [return: bb3, unwind: bb4]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:55: 499:74
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:60: 499:66
                                         // + literal: Const { ty: for<'r> fn(&'r BitVec32, usize) -> bool {BitVec32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:73: 499:74
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:73: 499:74
        _0 = Eq(move _2, move _5);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:74
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:73: 499:74
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:73: 499:74
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:74: 499:74
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:499:35: 499:74
    }
}
