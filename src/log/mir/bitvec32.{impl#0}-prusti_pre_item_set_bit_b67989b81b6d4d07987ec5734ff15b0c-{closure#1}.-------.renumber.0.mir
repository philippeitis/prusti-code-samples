// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:8:1: 350:2>::prusti_pre_item_set_bit_b67989b81b6d4d07987ec5734ff15b0c::{closure#1}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:8:1: 350:2>::prusti_pre_item_set_bit_b67989b81b6d4d07987ec5734ff15b0c::{closure#1}(_1: &'_#11r [closure@/home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:48]) -> bool {
    debug index => (*((*_1).0: &'_#16r usize)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:52:31: 52:36
    debug self => (*((*_1).1: &'_#17r &'_#18r mut BitVec32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:52:20: 52:29
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:48
    let mut _2: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:35
    let mut _3: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:38: 44:48
    let mut _4: &'_#15r BitVec32;        // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:38: 44:42

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:35
        _2 = (*((*_1).0: &'_#7r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:35
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:38: 44:48
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:38: 44:42
        _4 = &'_#8r (*(*((*_1).1: &'_#9r &'_#10r mut BitVec32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:38: 44:42
        _3 = BitVec32::len(move _4) -> [return: bb1, unwind: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:38: 44:48
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:43: 44:46
                                         // + literal: Const { ty: for<'r> fn(&'r BitVec32) -> usize {BitVec32::len}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:47: 44:48
        _0 = Lt(move _2, move _3);       // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:48
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:47: 44:48
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:47: 44:48
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:48: 44:48
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:44:30: 44:48
    }
}
