// MIR for `prusti_post_item_checked_add_40e8cb1d14ec4af9a3a68b1cefcdad0b::{closure#0}` 0 renumber

fn prusti_post_item_checked_add_40e8cb1d14ec4af9a3a68b1cefcdad0b::{closure#0}(_1: &'_#14r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 110:6]) -> bool {
    debug result => (*((*_1).0: &'_#20r (bool, u32))); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:113:1: 119:2
    debug a => (*((*_1).1: &'_#21r u32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:113:16: 113:17
    debug b => (*((*_1).2: &'_#22r u32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:113:24: 113:25
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 110:6
    let mut _2: &'_#18r (bool, u32);     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 105:11
    let mut _3: &'_#19r (bool, u32);     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
    let _4: (bool, u32);                 // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
    let mut _5: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:8: 106:25
    let mut _6: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:8: 106:9
    let mut _7: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:13: 106:25
    let mut _8: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:24: 106:25
    let mut _9: (u32, bool);             // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:13: 106:25
    let mut _10: u32;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:21
    let mut _11: u32;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:17
    let mut _12: u32;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:20: 107:21
    let mut _13: (u32, bool);            // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:21

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 105:11
        _2 = &'_#7r (*((*_1).0: &'_#8r (bool, u32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 105:11
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:8: 106:25
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:8: 106:9
        _6 = (*((*_1).1: &'_#9r u32));   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:8: 106:9
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:13: 106:25
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:24: 106:25
        _8 = (*((*_1).2: &'_#10r u32));  // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:24: 106:25
        _9 = CheckedSub(const core::num::<impl u32>::MAX, _8); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:13: 106:25
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const core::num::<impl u32>::MAX, move _8) -> [success: bb1, unwind: bb7]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:13: 106:25
    }

    bb1: {
        _7 = move (_9.0: u32);           // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:13: 106:25
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:24: 106:25
        _5 = Le(move _6, move _7);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:8: 106:25
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:24: 106:25
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:24: 106:25
        switchInt(move _5) -> [false: bb3, otherwise: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
    }

    bb2: {
        StorageLive(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:21
        StorageLive(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:17
        _11 = (*((*_1).1: &'_#11r u32)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:17
        StorageLive(_12);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:20: 107:21
        _12 = (*((*_1).2: &'_#12r u32)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:20: 107:21
        _13 = CheckedAdd(_11, _12);      // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:21
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb4, unwind: bb7]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:21
    }

    bb3: {
        _4 = (const false, const 0_u32); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:109:9: 109:19
        goto -> bb5;                     // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
    }

    bb4: {
        _10 = move (_13.0: u32);         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:16: 107:21
        StorageDead(_12);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:20: 107:21
        StorageDead(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:20: 107:21
        _4 = (const true, move _10);     // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:9: 107:22
        StorageDead(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:107:21: 107:22
        goto -> bb5;                     // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
    }

    bb5: {
        _3 = &'_#13r _4;                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:106:5: 110:6
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:110:5: 110:6
        _0 = <(bool, u32) as std::cmp::PartialEq>::eq(move _2, move _3) -> [return: bb6, unwind: bb7]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 110:6
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 110:6
                                         // + literal: Const { ty: for<'r, 's> fn(&'r (bool, u32), &'s (bool, u32)) -> bool {<(bool, u32) as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:110:5: 110:6
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:110:5: 110:6
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:110:5: 110:6
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:110:6: 110:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:105:5: 110:6
    }
}
