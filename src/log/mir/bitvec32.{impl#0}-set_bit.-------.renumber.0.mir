// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:8:1: 350:2>::set_bit` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:8:1: 350:2>::set_bit(_1: &'_#4r mut BitVec32, _2: usize, _3: bool) -> () {
    debug self => _1;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:52:20: 52:29
    debug index => _2;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:52:31: 52:36
    debug val => _3;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:52:45: 52:48
    let mut _0: ();                      // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:52:56: 52:56
    let mut _4: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:12: 53:15
    let mut _5: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:23: 54:33
    let mut _6: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:28: 54:33
    let mut _7: (u32, bool);             // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:23: 54:33
    let mut _8: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:23: 56:36
    let mut _9: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:24: 56:36
    let mut _10: usize;                  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:30: 56:35
    let mut _11: (u32, bool);            // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:24: 56:36

    bb0: {
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:12: 53:15
        _4 = _3;                         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:12: 53:15
        switchInt(move _4) -> [false: bb2, otherwise: bb1]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:9: 57:10
    }

    bb1: {
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:23: 54:33
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:28: 54:33
        _6 = _2;                         // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:28: 54:33
        _7 = CheckedShl(const 1_u32, _6); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:23: 54:33
        assert(!move (_7.1: bool), "attempt to shift left by `{}`, which would overflow", move _6) -> [success: bb3, unwind: bb6]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:23: 54:33
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:23: 56:36
        StorageLive(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:24: 56:36
        StorageLive(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:30: 56:35
        _10 = _2;                        // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:30: 56:35
        _11 = CheckedShl(const 1_u32, _10); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:24: 56:36
        assert(!move (_11.1: bool), "attempt to shift left by `{}`, which would overflow", move _10) -> [success: bb4, unwind: bb6]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:24: 56:36
    }

    bb3: {
        _5 = move (_7.0: u32);           // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:23: 54:33
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:32: 54:33
        ((*_1).0: u32) = BitOr(((*_1).0: u32), move _5); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:13: 54:33
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:54:32: 54:33
        _0 = const ();                   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:16: 55:10
        goto -> bb5;                     // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:9: 57:10
    }

    bb4: {
        _9 = move (_11.0: u32);          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:24: 56:36
        StorageDead(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:35: 56:36
        _8 = Not(move _9);               // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:23: 56:36
        StorageDead(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:35: 56:36
        ((*_1).0: u32) = BitAnd(((*_1).0: u32), move _8); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:13: 56:36
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:56:35: 56:36
        _0 = const ();                   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:55:16: 57:10
        goto -> bb5;                     // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:53:9: 57:10
    }

    bb5: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:57:9: 57:10
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:58:6: 58:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bitvec32.rs:52:5: 58:6
    }
}
