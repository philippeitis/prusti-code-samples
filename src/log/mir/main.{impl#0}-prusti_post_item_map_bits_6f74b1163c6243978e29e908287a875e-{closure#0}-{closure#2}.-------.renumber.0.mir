// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:145:1: 417:2>::prusti_post_item_map_bits_6f74b1163c6243978e29e908287a875e::{closure#0}::{closure#2}` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:145:1: 417:2>::prusti_post_item_map_bits_6f74b1163c6243978e29e908287a875e::{closure#0}::{closure#2}(_1: &'_#24r [closure@/home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:88]) -> bool {
    debug result => (*((*_1).0: &'_#36r BoolArr32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:387:5: 401:6
    debug i => (*((*_1).1: &'_#37r usize)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:383:17: 383:18
    debug f => (*((*_1).2: &'_#38r F));  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:387:70: 387:71
    debug self => (*((*_1).3: &'_#39r &'_#40r BoolArr32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:387:44: 387:49
    debug other => (*((*_1).4: &'_#41r &'_#42r BoolArr32)); // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:387:51: 387:56
    let mut _0: bool;                    // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:88
    let mut _2: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:50
    let mut _3: &'_#32r BoolArr32;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:40
    let mut _4: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:48: 384:49
    let mut _5: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:88
    let mut _6: &'_#33r F;               // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:55
    let mut _7: (bool, bool);            // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:88
    let mut _8: bool;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:56: 384:70
    let mut _9: &'_#34r BoolArr32;       // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:56: 384:60
    let mut _10: usize;                  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:68: 384:69
    let mut _11: bool;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:72: 384:87
    let mut _12: &'_#35r BoolArr32;      // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:72: 384:77
    let mut _13: usize;                  // in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:85: 384:86

    bb0: {
        StorageLive(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:50
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:40
        _3 = &'_#11r (*((*_1).0: &'_#12r BoolArr32)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:40
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:48: 384:49
        _4 = (*((*_1).1: &'_#13r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:48: 384:49
        _2 = BoolArr32::lookup(move _3, move _4) -> [return: bb1, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:50
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:41: 384:47
                                         // + literal: Const { ty: for<'r> fn(&'r BoolArr32, usize) -> bool {BoolArr32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:49: 384:50
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:49: 384:50
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:88
        StorageLive(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:55
        _6 = &'_#14r (*((*_1).2: &'_#15r F)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:55
        StorageLive(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:88
        StorageLive(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:56: 384:70
        StorageLive(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:56: 384:60
        _9 = &'_#16r (*(*((*_1).3: &'_#17r &'_#18r BoolArr32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:56: 384:60
        StorageLive(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:68: 384:69
        _10 = (*((*_1).1: &'_#19r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:68: 384:69
        _8 = BoolArr32::lookup(move _9, move _10) -> [return: bb2, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:56: 384:70
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:61: 384:67
                                         // + literal: Const { ty: for<'r> fn(&'r BoolArr32, usize) -> bool {BoolArr32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_10);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:69: 384:70
        StorageDead(_9);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:69: 384:70
        StorageLive(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:72: 384:87
        StorageLive(_12);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:72: 384:77
        _12 = &'_#20r (*(*((*_1).4: &'_#21r &'_#22r BoolArr32))); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:72: 384:77
        StorageLive(_13);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:85: 384:86
        _13 = (*((*_1).1: &'_#23r usize)); // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:85: 384:86
        _11 = BoolArr32::lookup(move _12, move _13) -> [return: bb3, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:72: 384:87
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:78: 384:84
                                         // + literal: Const { ty: for<'r> fn(&'r BoolArr32, usize) -> bool {BoolArr32::lookup}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_13);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:86: 384:87
        StorageDead(_12);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:86: 384:87
        _7 = (move _8, move _11);        // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:88
        _5 = <F as std::ops::Fn<(bool, bool)>>::call(move _6, move _7) -> [return: bb4, unwind: bb5]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:88
                                         // mir::Constant
                                         // + span: /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:54: 384:55
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r F, (bool, bool)) -> <F as std::ops::FnOnce<(bool, bool)>>::Output {<F as std::ops::Fn<(bool, bool)>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_11);                // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:87: 384:88
        StorageDead(_8);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:87: 384:88
        StorageDead(_7);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:87: 384:88
        StorageDead(_6);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:87: 384:88
        _0 = Eq(move _2, move _5);       // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:88
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:87: 384:88
        StorageDead(_2);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:87: 384:88
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:88: 384:88
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/main.rs:384:34: 384:88
    }
}
