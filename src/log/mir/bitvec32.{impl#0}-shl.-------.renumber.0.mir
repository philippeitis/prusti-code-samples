// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:8:1: 350:2>::shl` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:8:1: 350:2>::shl(_1: &'_#4r BitVec32, _2: usize) -> BitVec32 {
    debug self => _1;                    // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:172:12: 172:17
    debug amt => _2;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:172:19: 172:22
    let mut _0: BitVec32;                // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:172:34: 172:42
    let mut _3: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:36
    let mut _4: u32;                     // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:29
    let mut _5: usize;                   // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:33: 173:36
    let mut _6: (u32, bool);             // in scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:36

    bb0: {
        StorageLive(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:36
        StorageLive(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:29
        _4 = ((*_1).0: u32);             // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:29
        StorageLive(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:33: 173:36
        _5 = _2;                         // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:33: 173:36
        _6 = CheckedShr(_4, _5);         // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:36
        assert(!move (_6.1: bool), "attempt to shift right by `{}`, which would overflow", move _5) -> [success: bb1, unwind: bb2]; // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:36
    }

    bb1: {
        _3 = move (_6.0: u32);           // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:23: 173:36
        StorageDead(_5);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:35: 173:36
        StorageDead(_4);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:35: 173:36
        _0 = BitVec32 { v: move _3 };    // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:9: 173:38
        StorageDead(_3);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:173:37: 173:38
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:174:6: 174:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_code_samples/src/bitvec32.rs:172:5: 174:6
    }
}
