// MIR for `<impl at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:145:1: 423:2>::zero` 0 renumber

fn <impl at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:145:1: 423:2>::zero() -> BoolArr32 {
    let mut _0: BoolArr32;               // return place in scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:152:22: 152:26
    let mut _1: std::vec::Vec<bool>;     // in scope 0 at /rustc/fe1bf8e05c39bdcc73fc09e246b7209444e389bc/library/alloc/src/macros.rs:48:36: 48:69

    bb0: {
        StorageLive(_1);                 // scope 0 at /rustc/fe1bf8e05c39bdcc73fc09e246b7209444e389bc/library/alloc/src/macros.rs:48:36: 48:69
        _1 = std::vec::from_elem::<bool>(const false, const 32_usize) -> [return: bb1, unwind: bb3]; // scope 0 at /rustc/fe1bf8e05c39bdcc73fc09e246b7209444e389bc/library/alloc/src/macros.rs:48:36: 48:69
                                         // mir::Constant
                                         // + span: /rustc/fe1bf8e05c39bdcc73fc09e246b7209444e389bc/library/alloc/src/macros.rs:48:36: 48:58
                                         // + literal: Const { ty: fn(bool, usize) -> std::vec::Vec<bool> {std::vec::from_elem::<bool>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = BoolArr32 { v: move _1 };   // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:153:9: 153:41
        drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:153:40: 153:41
    }

    bb2: {
        StorageDead(_1);                 // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:153:40: 153:41
        return;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:154:6: 154:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at /home/philippe/VSCodeProjects/prusti_0/src/bytevec.rs:152:5: 154:6
    }
}
